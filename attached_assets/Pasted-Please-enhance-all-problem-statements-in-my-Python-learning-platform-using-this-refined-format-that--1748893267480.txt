Please enhance all problem statements in my Python learning platform using this refined format that is professional, concise, and precise:

REQUIRED FORMAT FOR EVERY PROBLEM:

**[Problem Title]**
**[Difficulty] - [Main Python Concept]**

**What You're Building:**
[1-2 sentences maximum: realistic scenario + clear purpose]

**Your Task:**
- [Specific requirement with data type]: "Store your name as a string variable"
- [Specific requirement with data type]: "Store your age as an integer variable" 
- [Specific requirement with data type]: "Store status as a boolean variable"
- [Clear return requirement]: "Return all values as a tuple"

**Skills Practiced:** [Concept 1] • [Concept 2] • [Concept 3]

**Example:**
```python
[Complete code example showing function usage]
[Expected output with realistic data]
EXAMPLE TRANSFORMATION:
BEFORE (current):
Personal Information Card
Easy
Store personal information for a networking app.
AFTER (refined):
Personal Information Card
Easy - Variable Assignment
What You're Building:
Create a digital business card generator for a networking app. Store and display professional contact information cleanly.
Your Task:

Store your name as a string variable
Store your age as an integer variable
Store your city as a string variable
Store your occupation as a string variable
Return all values as a tuple

Skills Practiced: Variable Assignment • String Storage • Data Organization
Example:
pythonname, age, city, job = create_business_card()
print(f"{name}, {age} years old from {city}")
# Output: "Alice Smith, 28 years old from New York"
QUALITY GUIDELINES:
✅ Keep "What You're Building" to 1-2 sentences maximum
✅ Specify data types in task requirements (string, integer, float, boolean)
✅ Use precise language: "Store your name as a string" not "Store name"
✅ Always include clear return requirement
✅ Show complete code examples with proper markdown formatting
✅ Include expected output with realistic, professional data
✅ Use practical applications (business cards, online stores, weather apps, games)
✅ List 2-3 key skills in dot-separated format
✅ Professional tone, total reading time: 15-30 seconds maximum
AVOID:
❌ Vague task descriptions without data types
❌ Incomplete code examples
❌ Missing expected output
❌ Unrealistic example data
❌ Long explanations or multiple paragraphs
❌ Academic-style verbose descriptions
Apply this exact refined format to ALL problems across all sections (Python Basics, Control Flow, Functions, Data Structures) to create consistent, professional, precise problem statements.